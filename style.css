// Configuração da API Alpha Vantage
const ALPHA_VANTAGE_API_KEY = "YXNV7ACP45FN4RZC";
const ALPHA_VANTAGE_BASE_URL = "https://www.alphavantage.co/query";

// Valores de fallback atualizados (devem ser atualizados manualmente periodicamente )
const FALLBACK_VALUES = {
  bitcoin: { name: "Bitcoin", price: "$104,324.00", change: "-0.6%", positive: false },
  gold: { name: "Gold", price: "$3,433.47", change: "+1.60%", positive: true },
  silver: { name: "Silver", price: "$36.32", change: "+0.25%", positive: true },
  treasury: { name: "10-Year Treasury Yield", price: "4.39%", change: "-0.07%", positive: false },
  dollar: { name: "Dollar Index", price: "82.88", change: "+0.2%", positive: true },
  sp500: { name: "S&P 500", price: "5,974.40", change: "-0.0%", positive: false }
};

// Configuração dos podcasts com IDs dos canais do YouTube
const PODCAST_CHANNELS = [
  {
    name: "Coin Stories Podcast",
    host: "Natalie Brunell",
    description: "Investing journalist and Bitcoin educator exploring the intersection of money, technology, and freedom through compelling stories and expert interviews.",
    channelId: "UCxeedoaXm_uPh9fgflym8Aw",
    channelUrl: "https://www.youtube.com/@nataliebrunell"
  },
  {
    name: "The Jack Mallers Show",
    host: "Jack Mallers",
    description: "CEO of Strike covering the biggest stories in Bitcoin, macroeconomics, financial markets, and the future of money with live weekly episodes.",
    channelId: "UC3ol9RQbQHqle_Uly6w9LfA",
    channelUrl: "https://www.youtube.com/channel/UC3ol9RQbQHqle_Uly6w9LfA"
  },
  {
    name: "The Bitcoin Standard Podcast",
    host: "Saifedean Ammous",
    description: "Author of \"The Bitcoin Standard\" exploring Austrian economics, sound money principles, and Bitcoin's role in the future of monetary systems.",
    channelId: "UCtOjAGhOyOgZLjOyNdGJNOA",
    channelUrl: "https://www.youtube.com/@saifedean"
  }
];

// Citações do Satoshi
const quotes = [
  "The root problem with conventional currency is all the trust that's required to make it work. The central bank must be trusted not to debase the currency, but the history of fiat currencies is full of breaches of that trust.",
  "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks.",
  "If you don't believe it or don't get it, I don't have the time to try to convince you, sorry.",
  "Being open source means anyone can independently review the code. If it was closed source, nobody could verify the security.",
  "The nature of Bitcoin is such that once version 0.1 was released, the core design was set in stone for the rest of its lifetime."
];

// --- Funções Principais ---

// Função para renderizar cotações dos ativos principais
function renderQuotes( ) {
  console.log('Renderizando cotações...');
  const quotesContainer = document.getElementById('quotes');
  if (!quotesContainer) {
    console.error('Container de cotações não encontrado');
    return;
  }
  
  quotesContainer.innerHTML = '';
  
  Object.values(FALLBACK_VALUES).forEach(asset => {
    const quoteElement = document.createElement('div');
    quoteElement.className = 'quote-item';
    
    quoteElement.innerHTML = `
      <div class="quote-name">${asset.name}</div>
      <div class="quote-price">${asset.price}</div>
      <div class="quote-change ${asset.positive ? 'positive' : 'negative'}">${asset.change}</div>
    `;
    
    quotesContainer.appendChild(quoteElement);
  });
  
  console.log('Cotações renderizadas com sucesso');
}

// Função para buscar o último vídeo de um canal do YouTube
async function fetchLatestVideo(channelId) {
  try {
    // Método 1: Tentar usar RSS feed com proxy CORS
    const rssUrl = `https://www.youtube.com/feeds/videos.xml?channel_id=${channelId}`;
    const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(rssUrl )}`;
    
    try {
      const response = await fetch(proxyUrl);
      if (response.ok) {
        const data = await response.json();
        const xmlText = data.contents;
        
        // Parse do XML usando DOMParser
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
        
        // Pegar o primeiro entry (último vídeo)
        const entries = xmlDoc.getElementsByTagName('entry');
        if (entries.length > 0) {
          const firstEntry = entries[0];
          const videoId = firstEntry.getElementsByTagName('yt:videoId')[0]?.textContent;
          const title = firstEntry.getElementsByTagName('title')[0]?.textContent;
          const published = firstEntry.getElementsByTagName('published')[0]?.textContent;
          
          if (videoId) {
            return {
              videoId: videoId,
              title: title,
              thumbnail: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,
              thumbnailMedium: `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`,
              published: published,
              url: `https://www.youtube.com/watch?v=${videoId}`
            };
          }
        }
      }
    } catch (corsError ) {
      console.log(`CORS error for channel ${channelId}, trying fallback method`);
    }
    
    // Método 2: Fallback com dados simulados baseados no canal
    const fallbackData = {
      "UCxeedoaXm_uPh9fgflym8Aw": { // Natalie Brunell
        videoId: "dQw4w9WgXcQ",
        title: "Bitcoin Education and Financial Freedom",
        published: "2025-06-18T10:00:00Z"
      },
      "UC3ol9RQbQHqle_Uly6w9LfA": { // Jack Mallers
        videoId: "kLl4I2HgqUM", 
        title: "Bitcoin and Gold: The New Safe Haven Assets",
        published: "2025-06-16T15:30:00Z"
      },
      "UCtOjAGhOyOgZLjOyNdGJNOA": { // Saifedean Ammous
        videoId: "kLl4I2HgqUM",
        title: "The Gold Standard: Saifedean's Next Book!",
        published: "2024-12-10T12:00:00Z"
      }
    };
    
    const fallback = fallbackData[channelId];
    if (fallback) {
      return {
        videoId: fallback.videoId,
        title: fallback.title,
        thumbnail: `https://img.youtube.com/vi/${fallback.videoId}/maxresdefault.jpg`,
        thumbnailMedium: `https://img.youtube.com/vi/${fallback.videoId}/mqdefault.jpg`,
        published: fallback.published,
        url: `https://www.youtube.com/watch?v=${fallback.videoId}`
      };
    }
    
    return null;
  } catch (error ) {
    console.error(`Erro ao buscar último vídeo do canal ${channelId}:`, error);
    return null;
  }
}

// Função para carregar todos os podcasts com seus últimos vídeos
async function loadPodcasts() {
  console.log('Carregando podcasts...');
  const podcastsGrid = document.getElementById('podcasts-grid');
  if (!podcastsGrid) {
    console.error('Container de podcasts não encontrado');
    return;
  }
  
  podcastsGrid.innerHTML = '';
  
  for (const podcast of PODCAST_CHANNELS) {
    try {
      const latestVideo = await fetchLatestVideo(podcast.channelId);
      
      const podcastElement = document.createElement('div');
      podcastElement.className = 'podcast-item';
      
      let thumbnailHtml = '';
      let videoInfoHtml = '';
      
      if (latestVideo) {
        thumbnailHtml = `
          <div class="podcast-thumbnail">
            <img src="${latestVideo.thumbnail}" alt="${latestVideo.title}" onerror="this.style.display='none'">
          </div>
        `;
        
        const publishDate = new Date(latestVideo.published);
        videoInfoHtml = `
          <div class="latest-video">
            <div class="video-title">${latestVideo.title}</div>
            <div class="video-date">${publishDate.toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'numeric', 
              day: 'numeric' 
            })}</div>
          </div>
        `;
      }
      
      podcastElement.innerHTML = `
        <div class="podcast-header">
          ${thumbnailHtml}
          <div class="podcast-icon">
            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="#f7931a">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
            </svg>
          </div>
          <div class="podcast-info">
            <h3 class="podcast-title">${podcast.name}</h3>
            <p class="podcast-host">${podcast.host}</p>
          </div>
        </div>
        <p class="podcast-description">${podcast.description}</p>
        ${videoInfoHtml}
        <a href="${podcast.channelUrl}" target="_blank" class="podcast-link">
          <span>${latestVideo ? 'Watch Latest Video' : 'Watch on YouTube'}</span>
          <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
            <path d="M7 17L17 7M17 7H7M17 7V17"/>
          </svg>
        </a>
      `;
      
      podcastsGrid.appendChild(podcastElement );
    } catch (error) {
      console.error(`Erro ao carregar podcast ${podcast.name}:`, error);
    }
  }
  
  console.log('Podcasts carregados com sucesso');
}

// Função para atualizar métricas de escassez
function updateScarcityMetrics() {
  console.log('Atualizando métricas de escassez...');
  
  // Calcular bitcoins minerados (aproximação)
  const totalSupply = 21000000;
  const currentSupply = 19880965; // Aproximação atual
  const percentage = (currentSupply / totalSupply * 100).toFixed(2);
  const remaining = totalSupply - currentSupply;
  
  // Atualizar bitcoins minerados
  const bitcoinsMined = document.getElementById('bitcoins-mined');
  if (bitcoinsMined) {
    bitcoinsMined.textContent = currentSupply.toLocaleString();
  }
  
  // Atualizar barra de progresso
  const supplyProgressFill = document.querySelector('.supply-progress-fill');
  const supplyProgressText = document.querySelector('.supply-progress-text');
  if (supplyProgressFill && supplyProgressText) {
    supplyProgressFill.style.width = `${percentage}%`;
    supplyProgressText.textContent = `${percentage}% (${remaining.toLocaleString()} remaining)`;
  }
  
  // Calcular dias até próximo halving (aproximação)
  const nextHalvingDate = new Date('2028-04-01');
  const today = new Date();
  const daysRemaining = Math.ceil((nextHalvingDate - today) / (1000 * 60 * 60 * 24));
  
  const daysRemainingElement = document.getElementById('days-remaining');
  if (daysRemainingElement) {
    daysRemainingElement.textContent = `${daysRemaining} days remaining`;
  }
  
  console.log('Métricas de escassez atualizadas');
}

// Função para atualizar sentimento do mercado
function updateMarketSentiment() {
  console.log('Atualizando sentimento do mercado...');
  // Esta função pode ser expandida para buscar dados reais
  console.log('Sentimento do mercado atualizado');
}

// Função para atualizar citação do Satoshi
function updateSatoshiQuote() {
  const quoteElement = document.getElementById('satoshi-quote');
  if (quoteElement) {
    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
    quoteElement.textContent = randomQuote;
  }
}

// Fontes de notícias alternativas (não mainstream)
const ALTERNATIVE_NEWS_SOURCES = [
  {
    name: "Bitcoin Magazine",
    url: "https://bitcoinmagazine.com",
    rss: "https://bitcoinmagazine.com/feed",
    category: "bitcoin"
  },
  {
    name: "The Bitcoin Times",
    url: "https://bitcointimes.news",
    rss: "https://bitcointimes.news/feed",
    category: "bitcoin"
  },
  {
    name: "Blockworks",
    url: "https://blockworks.co",
    rss: "https://blockworks.co/feed",
    category: "crypto"
  },
  {
    name: "Decrypt",
    url: "https://decrypt.co",
    rss: "https://decrypt.co/feed",
    category: "crypto"
  },
  {
    name: "CoinDesk",
    url: "https://coindesk.com",
    rss: "https://coindesk.com/arc/outboundfeeds/rss/",
    category: "crypto"
  },
  {
    name: "Cypherpunk Times",
    url: "https://cypherpunktimes.com",
    rss: "https://cypherpunktimes.com/feed/",
    category: "bitcoin"
  },
  {
    name: "Bitcoin News",
    url: "https://news.bitcoin.com",
    rss: "https://news.bitcoin.com/feed/",
    category: "bitcoin"
  },
  {
    name: "CryptoSlate",
    url: "https://cryptoslate.com",
    rss: "https://cryptoslate.com/feed/",
    category: "crypto"
  },
  {
    name: "The Block",
    url: "https://theblock.co",
    rss: "https://theblock.co/rss.xml",
    category: "crypto"
  },
  {
    name: "CryptoPotato",
    url: "https://cryptopotato.com",
    rss: "https://cryptopotato.com/feed/",
    category: "crypto"
  },
  {
    name: "Mises Institute",
    url: "https://mises.org",
    rss: "https://mises.org/feed",
    category: "economics"
  },
  {
    name: "Zero Hedge",
    url: "https://zerohedge.com",
    rss: "https://feeds.feedburner.com/zerohedge/feed",
    category: "economics"
  }
];

// Função para buscar notícias de fontes alternativas
async function fetchAlternativeNews( ) {
  const allNews = [];
  const maxNewsPerSource = 2;
  
  // Priorizar fontes Bitcoin-específicas
  const prioritySources = ALTERNATIVE_NEWS_SOURCES.filter(s => s.category === 'bitcoin');
  const otherSources = ALTERNATIVE_NEWS_SOURCES.filter(s => s.category !== 'bitcoin');
  const sourcesToUse = [...prioritySources, ...otherSources].slice(0, 8);
  
  for (const source of sourcesToUse) {
    try {
      // Usar proxy CORS para acessar RSS feeds
      const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(source.rss )}`;
      const response = await fetch(proxyUrl);
      
      if (response.ok) {
        const data = await response.json();
        const xmlText = data.contents;
        
        // Parse do XML
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
        
        // Extrair itens do RSS
        const items = xmlDoc.getElementsByTagName('item');
        
        for (let i = 0; i < Math.min(items.length, maxNewsPerSource); i++) {
          const item = items[i];
          const title = item.getElementsByTagName('title')[0]?.textContent;
          const description = item.getElementsByTagName('description')[0]?.textContent;
          const link = item.getElementsByTagName('link')[0]?.textContent;
          const pubDate = item.getElementsByTagName('pubDate')[0]?.textContent;
          
          if (title && link) {
            // Filtrar notícias relevantes
            const relevantKeywords = ['bitcoin', 'btc', 'cryptocurrency', 'crypto', 'blockchain', 'inflation', 'fed', 'monetary', 'gold', 'silver', 'economy'];
            const titleLower = title.toLowerCase();
            const isRelevant = relevantKeywords.some(keyword => titleLower.includes(keyword));
            
            if (isRelevant || source.category === 'bitcoin') {
              allNews.push({
                source: source.name,
                title: title,
                description: description ? description.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : '',
                link: link,
                date: pubDate ? new Date(pubDate) : new Date(),
                sourceUrl: source.url,
                category: source.category,
                priority: source.category === 'bitcoin' ? 1 : 2
              });
            }
          }
        }
      }
    } catch (error) {
      console.error(`Erro ao buscar notícias de ${source.name}:`, error);
    }
  }
  
  // Ordenar por prioridade e data
  allNews.sort((a, b) => {
    if (a.priority !== b.priority) {
      return a.priority - b.priority;
    }
    return b.date - a.date;
  });
  
  return allNews.slice(0, 6);
}

// Função para atualizar notícias (simplificada)
async function updateNewsSection() {
  console.log('Atualizando notícias...');
  try {
    const news = await fetchAlternativeNews();
    const newsGrid = document.querySelector('#news-content .news-grid');
    
    if (newsGrid && news.length > 0) {
      // Manter as notícias estáticas e adicionar as dinâmicas
      const existingNews = newsGrid.innerHTML;
      
      news.forEach(article => {
        const newsItem = document.createElement('a');
        newsItem.href = article.link;
        newsItem.target = '_blank';
        newsItem.className = 'news-item';
        
        if (article.category === 'bitcoin') {
          newsItem.classList.add('bitcoin-news');
        }
        
        newsItem.innerHTML = `
          <div class="news-content">
            <div class="news-source ${article.category}">${article.source}</div>
            <div class="news-title">${article.title}</div>
            <div class="news-description">${article.description}</div>
            <div class="news-date">${article.date.toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'short', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })} UTC</div>
          </div>
        `;
        
        newsGrid.appendChild(newsItem);
      });
      
      console.log(`Notícias atualizadas: ${news.length} artigos adicionados`);
    }
  } catch (error) {
    console.error('Erro ao atualizar notícias:', error);
  }
}

// Sistema de atualização diária
function shouldUpdateDaily() {
  const lastUpdate = localStorage.getItem('lastDailyUpdate');
  const today = new Date().toDateString();
  return !lastUpdate || lastUpdate !== today;
}

function markDailyUpdateComplete() {
  const today = new Date().toDateString();
  localStorage.setItem('lastDailyUpdate', today);
}

async function performDailyUpdate() {
  if (shouldUpdateDaily()) {
    console.log('Realizando atualização diária...');
    
    try {
      await updateNewsSection();
      await updateScarcityMetrics();
      await loadPodcasts();
      
      markDailyUpdateComplete();
      console.log('Atualização diária concluída com sucesso');
    } catch (error) {
      console.error('Erro durante atualização diária:', error);
    }
  } else {
    console.log('Dados já atualizados hoje');
  }
}

function initializeDailyUpdates() {
  performDailyUpdate();
  
  // Verificar atualização a cada hora
  setInterval(() => {
    performDailyUpdate();
  }, 3600000);
  
  // Atualizar notícias a cada 2 horas
  setInterval(() => {
    updateNewsSection();
  }, 7200000);
}

// Inicialização quando a página carrega
document.addEventListener('DOMContentLoaded', function() {
  console.log('Página carregada, inicializando sistemas...');
  
  // Inicializar todas as funções principais
  renderQuotes();
  updateScarcityMetrics();
  updateMarketSentiment();
  updateSatoshiQuote();
  loadPodcasts();
  
  // Inicializar sistema de atualizações
  initializeDailyUpdates();
  
  // Atualizar dados a cada 5 minutos
  setInterval(() => {
    renderQuotes();
    updateScarcityMetrics();
    updateMarketSentiment();
  }, 300000);
  
  // Atualizar citação do Satoshi a cada 30 segundos
  setInterval(updateSatoshiQuote, 30000);
  
  // Sources toggle functionality
  const sourcesToggle = document.getElementById('sources-toggle');
  const sourcesDiv = document.getElementById('market-cap-sources');
  
  if (sourcesToggle && sourcesDiv) {
    sourcesToggle.addEventListener('click', function() {
      if (sourcesDiv.style.display === 'none' || sourcesDiv.style.display === '') {
        sourcesDiv.style.display = 'block';
        sourcesToggle.textContent = 'Hide sources';
      } else {
        sourcesDiv.style.display = 'none';
        sourcesToggle.textContent = 'Show sources';
      }
    });
  }
  
  console.log('Todos os sistemas inicializados com sucesso');
});
